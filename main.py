import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from flask import Flask
import threading

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "8117565230:AAHeYBMHJ6ylO4hYdRpITf3f8OTp13GsNaU"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã—Ñ
EXCHANGE_RATE = 12.20  # –ö—É—Ä—Å —é–∞–Ω—è
SERVICE_FEE = 1700  # –¢–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç
DELIVERY_COST = 2000  # –î–æ—Å—Ç–∞–≤–∫–∞
EXTRA_FEE = 1000  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
MANAGER_USERNAME = "Gooseparis"  # –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="calculate")],
    [InlineKeyboardButton(text="üõç –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å", callback_data="instruction")],
    [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"https://t.me/{MANAGER_USERNAME}")]
])

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —Å Poizon.", reply_markup=main_menu)

@dp.callback_query(lambda c: c.data == "calculate")
async def ask_item_price(callback: types.CallbackQuery):
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (CNY):")
    await callback.answer()

@dp.message()
async def process_price(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_data:
        user_data[user_id] = {}

    if message.text.isdigit():
        price_cny = int(message.text)
        user_data[user_id]["price_cny"] = price_cny

        total_price = (price_cny * EXCHANGE_RATE) + SERVICE_FEE + DELIVERY_COST + EXTRA_FEE

        response_text = (
            f"üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {price_cny} CNY\n"
            f"üìà –ö—É—Ä—Å: {EXCHANGE_RATE}\n"
            f"üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {price_cny * EXCHANGE_RATE:.2f} ‚ÇΩ\n"
            f"üíµ –ö–æ–º–∏—Å—Å–∏—è: {SERVICE_FEE} ‚ÇΩ\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_COST} ‚ÇΩ\n"
            f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {total_price:.2f} ‚ÇΩ\n\n"
            f"üîó **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É @Gooseparis –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!**"
        )

        await message.answer(response_text, reply_markup=main_menu)
        del user_data[user_id]

@dp.callback_query(lambda c: c.data == "instruction")
async def instruction(callback: types.CallbackQuery):
    text_parts = [
        "üìñ **–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —Å Poizon**\n\n"
        "‚úÖ **1. –£—Å—Ç–∞–Ω–æ–≤–∏ Poizon**\n"
        "üì≤ –°–∫–∞—á–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Poizon –≤ App Store –∏–ª–∏ Google Play.\n"
        "üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ WeChat, QQ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",

        "‚úÖ **2. –ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä**\n"
        "üîé –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ –º–æ–¥–µ–ª–∏ –≤ –ø–æ–∏—Å–∫.\n"
        "üõí –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä.",

        "‚úÖ **3. –ü–æ—Å–º–æ—Ç—Ä–∏ —Ü–µ–Ω—É**\n"
        "üí∞ –¶–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö (CNY) —É–∫–∞–∑–∞–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞.\n"
        "‚ö†Ô∏è –ù–∞–º –Ω—É–∂–Ω–∞ **—Ç–æ–ª—å–∫–æ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞**, –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ö–∏—Ç–∞–µ.",

        "‚úÖ **4. –í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤ –±–æ—Ç–µ**\n"
        "‚úç –û—Ç–ø—Ä–∞–≤—å —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é, –±–æ—Ç —Å–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.",

        "‚úÖ **5. –ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞**\n"
        "üîó –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É **@Gooseparis**.\n"
        "üí≥ –û–Ω —É—Ç–æ—á–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ –∏ –æ—Ñ–æ—Ä–º–∏—Ç –∑–∞–∫–∞–∑.",

        f"üìå **–í—Å–µ —Ü–µ–Ω—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ –∫—É—Ä—Å—É** {EXCHANGE_RATE} ‚ÇΩ –∑–∞ 1 CNY.\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –∫–æ–º–∏—Å—Å–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–∞—Å—á–µ—Ç!"
    ]

    for part in text_parts:
        await callback.message.answer(part, parse_mode=ParseMode.MARKDOWN)
        await asyncio.sleep(1)

    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è UptimeRobot
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_web():
    app.run(host='0.0.0.0', port=8080)

async def main():
    threading.Thread(target=run_web, daemon=True).start()  # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())